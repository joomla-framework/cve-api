<?php

/**
 * Part of the Joomla Framework CVE Package
 *
 * @copyright  Copyright (C) 2021 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

namespace Joomla\Cve;

use Joomla\Http\Exception\UnexpectedResponseException;
use Joomla\Http\Http;
use Joomla\Http\HttpFactory;
use Joomla\Http\Response;
use Joomla\Registry\Registry;
use Joomla\Uri\Uri;

/**
 * Class CveService
 *
 * @since  __DEPLOY_VERSION__
 */
final class CveService implements CveServiceInterface
{
    /**
     * Options for the CVE Service object.
     *
     * @var Registry
     */
    private $options;

    /**
     * The HTTP client to use for communication.
     *
     * @var Http
     */
    private $client;

    /**
     * @var array
     */
    private $error;

    /**
     * CveService constructor.
     *
     * @param   Registry|null  $options  The options
     * @param   Http|null      $client   The HTTP client to use for communication.
     */
    public function __construct(Registry $options = null, Http $client = null)
    {
        $this->options = $options ?: new Registry();

        // Setup the default user agent if not already set.
        if ($this->getOption('userAgent') === null) {
            $this->setOption('userAgent', 'Joomla-CVE/3.0');
        }

        // Setup the default API url if not already set.
        if ($this->getOption('api.url') === null) {
            $this->setOption('api.url', 'https://cveawg.mitre.org/api');
        }

        $this->client = $client ?: (new HttpFactory())->getHttp($this->options);
    }

    /**
     * Allows an Org to see details about their id_quota.
     *
     * @return  CveQuota  Details of the organization's id_quota
     */
    public function getQuota(): CveQuota
    {
        $this->setAuthentication();

        return new CveQuota($this->decodeResponse($this->get('/org/' . $this->options->get('api.org') . '/id_quota')));
    }

    /**
     * Retrieve a CVE ID by ID, can be a CVE the entity doesn't own if in a PUBLIC or REJECT state.
     *
     * @param   string  $id  The actual CVE ID (CVE-YYYY-XXX).
     *
     * @return  CveId
     */
    public function getId(string $id): CveId
    {
        // @todo check validity

        $this->setAuthentication();

        return new CveId($this->decodeResponse($this->get('/cve-id/' . $id)));
    }

    /**
     * Retrieve all CVE IDs entity owns.
     *
     * @param   CveFilter|null  $filter  A filter to apply to the request
     *
     * @return  array
     */
    public function getIds(?CveFilter $filter = null): array
    {
        $this->setAuthentication();

        $body = $this->decodeResponse($this->get('/cve-id' . ($filter === null ? '' : '?' . $filter)));
        $ids  = [];

        foreach ($body['cve_ids'] as $id) {
            $ids[] = new CveId($id);
        }

        return $ids;
    }

    /**
     * Reserve a single priority ID for the organisation.
     *
     * @param   int|null  $year  The year the IDs should be reserved for. [1999...current+1]. Default is current+1.
     *
     * @return  CveId
     */
    public function reservePriorityId(?int $year = null): CveId
    {
        $this->setAuthentication();

        if ($year === null) {
            $year = (int) date('Y') + 1;
        }

        $path     = '/cve-id?amount=1&cve_year=' . $year . '&short_name=' . $this->options->get('api.org');
        $response = $this->decodeResponse($this->post($path));

        return new CveId($response['cve_ids'][0]);
    }

    /**
     * Reserve a batch of sequential IDs for the organisation.
     *
     * @param   int       $amount  Amount of IDs desired
     * @param   int|null  $year    The year the IDs should be reserved for. [1999...current+1]
     *
     * @return  array
     */
    public function reserveSequentialIds(int $amount, ?int $year = null): array
    {
        $this->setAuthentication();

        if ($year === null) {
            $year = (int) date('Y') + 1;
        }

        $path = '/cve-id?batch_type=sequential&amount=' . $amount . '&cve_year=' . $year . '&short_name=' . $this->options->get('api.org');

        $body = $this->decodeResponse($this->post($path));
        $ids  = [];

        foreach ($body['cve_ids'] as $id) {
            $ids[] = new CveId($id);
        }

        return $ids;
    }

    /**
     * Reserve a batch of non-sequential IDs for the organisation.
     *
     * @param   int       $amount  Amount of IDs desired
     * @param   int|null  $year    The  year the IDs should be reserved for. [1999...current+1]
     *
     * @return  array
     */
    public function reserveNonSequentialIds(int $amount, ?int $year = null): array
    {
        $this->setAuthentication();

        if ($year === null) {
            $year = (int) date('Y') + 1;
        }

        $path = '/cve-id?batch_type=nonsequential&amount=' . $amount . '&cve_year=' . $year . '&short_name=' . $this->options->get('api.org');

        $body = $this->decodeResponse($this->post($path));
        $ids  = [];

        foreach ($body['cve_ids'] as $id) {
            $ids[] = new CveId($id);
        }

        return $ids;
    }

    /**
     * Get the last error
     *
     * @return  array
     */
    public function getLastError(): array
    {
        return $this->error;
    }


    /**
     * Get an option from the GitHub instance.
     *
     * @param   string  $key  The name of the option to get.
     *
     * @return  mixed  The option value.
     *
     * @since   __DEPLOY_VERSION__
     */
    public function getOption(string $key)
    {
        return $this->options[$key] ?? null;
    }

    /**
     * Set an option for the GitHub instance.
     *
     * @param   string  $key    The name of the option to set.
     * @param   mixed   $value  The option value to set.
     *
     * @return  self  This object for method chaining.
     *
     * @since   __DEPLOY_VERSION__
     */
    public function setOption(string $key, $value): self
    {
        $this->options[$key] = $value;

        return $this;
    }

    /**
     * Set authentication header
     *
     * @return void
     */
    private function setAuthentication(): void
    {
        $headers = $this->client->getOption('headers', []);

        $headers['CVE-API-ORG']  = $headers['CVE-API-ORG'] ?? $this->options->get('api.org');
        $headers['CVE-API-USER'] = $headers['CVE-API-USER'] ?? $this->options->get('api.username');
        $headers['CVE-API-KEY']  = $headers['CVE-API-KEY'] ?? $this->options->get('api.key');

        $this->client->setOption('headers', $headers);
    }

    /**
     * Get data from the API
     *
     * @param   string  $path  The API endpoint
     *
     * @return Response
     */
    private function get(string $path): Response
    {
        return $this->client->get(new Uri($this->options->get('api.url') . $path));
    }

    /**
     * Post data to the API
     *
     * @param   string  $path  The API endpoint
     * @param   array   $data  The data to be posted
     *
     * @return Response
     */
    private function post(string $path, array $data = []): Response
    {
        return $this->client->post(new Uri($this->options->get('api.url') . $path), $data);
    }

    /**
     * Decode the response body
     *
     * @param   Response  $response  The Response
     *
     * @return mixed
     */
    private function decodeResponse(Response $response)
    {
        $body = \json_decode($response->body, true);

        $this->error = [
            'error'   => $body['error'] ?? '',
            'message' => $body['message'] ?? 'Ok',
        ];

        if (200 <= $response->code && $response->code <= 299) {
            return $body;
        }

        throw new UnexpectedResponseException($response, \implode(' ', $this->error), $response->code);
    }
}
